@page "/events"
@using EventRegistrationApp.Data
@using EventRegistrationApp.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject DataContext DbContext
@inject NavigationManager Navigation

<h3>Events</h3>

@if (events == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Event Name</th>
                <th>Seats Available</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var eventItem in events.Where(e => e.NumSeatsAvailable > 0))
            {
                <tr>
                    <td>@eventItem.EventName</td>
                    <td>@eventItem.NumSeatsAvailable</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditEvent(eventItem.EventId)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteEvent(eventItem.EventId)">Delete</button>
                        <button class="btn btn-success" @onclick="() => RegisterForEvent(eventItem.EventId)">Register</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-success" @onclick="CreateEvent">Create New Event</button>

@code {
    private List<Event> events;
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        events = await DbContext.events.ToListAsync();
    }

    private void CreateEvent()
    {
        Navigation.NavigateTo("/create-event");
    }

    private void EditEvent(int eventId)
    {
        Navigation.NavigateTo($"/edit-event/{eventId}");
    }

    private async Task DeleteEvent(int eventId)
    {
        var eventToDelete = await DbContext.events.FindAsync(eventId);
        if (eventToDelete != null)
        {
            DbContext.events.Remove(eventToDelete);
            await DbContext.SaveChangesAsync();
            events = await DbContext.events.ToListAsync();
        }
    }

    private async Task RegisterForEvent(int eventId)
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userIdClaim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
        if (userIdClaim == null)
        {
            errorMessage = "User is not authenticated.";
            return;
        }

        var userId = int.Parse(userIdClaim.Value);

        var existingRegistration = await DbContext.users.AnyAsync(u => u.UserId == userId && u.EventId == eventId);

        if (existingRegistration)
        {
            errorMessage = "You are already registered for this event.";
            return;
        }

        var registrationCode = GenerateUniqueRegistrationCode();

        var userEntity = await DbContext.users.FirstOrDefaultAsync(u => u.UserId == userId);
        if (userEntity != null)
        {
            userEntity.RegistrationCode = registrationCode;
            userEntity.EventId = eventId;
            await DbContext.SaveChangesAsync();

            successMessage = "Successfully registered for the event!";
        }

        events = await DbContext.events.ToListAsync();
    }

    private string GenerateUniqueRegistrationCode()
    {
        var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var random = new Random();
        var registrationCode = new string(Enumerable.Repeat(chars, 8)
            .Select(s => s[random.Next(s.Length)]).ToArray());
        return registrationCode;
    }
}



